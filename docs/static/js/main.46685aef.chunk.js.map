{"version":3,"sources":["features/cell/Cell.module.css","features/cell/cellSlice.js","features/cell/Cell.js","features/strand/strandSlice.js","features/strand/Strand.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","cellInput","cellTypes","Map","require","cellSlice","createSlice","name","reducers","addCell","state","data","split","newInput","forEach","item","index","strings","filter","length","Array","from","keys","includes","set","domains","slice","setCellInput","action","payload","selectCellTypes","cell","selectCellInput","actions","Cell","useSelector","dispatch","useDispatch","className","styles","placeholder","value","onChange","e","target","aria-label","onClick","size","map","cellName","cellData","get","domainName","strandInput","strandTypes","strandSlice","addStrand","color","match","startsWith","is_complementary","setStrandInput","selectStrandTypes","strand","selectStrandInput","Strand","strandName","strandData","style","App","store","configureStore","reducer","cellReducer","strandReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46685aef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2WEAz\"};","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst { Map } = require('immutable')\r\n\r\nconst initialState = {\r\n  cellInput: '',\r\n  cellTypes: new Map()\r\n}\r\n\r\nexport const cellSlice = createSlice({\r\n  name: 'cell',\r\n  initialState,\r\n  reducers: {\r\n    addCell: (state) => {\r\n      const data = state.cellInput.split('\\n')\r\n      let newInput = ''\r\n      data.forEach((item, index) => {\r\n        if (item !== '') {\r\n          let strings = item.split(' ')\r\n          strings = strings.filter(item => item)\r\n\r\n          if (strings.length <= 1) {\r\n            newInput += item + '\\n'\r\n          } else if (Array.from(state.cellTypes.keys()).includes(strings[0])) {\r\n            newInput += item + '\\n'\r\n          } else {\r\n            state.cellTypes = state.cellTypes.set(strings[0], { domains: strings.slice(1) })\r\n          }\r\n        }\r\n      })\r\n\r\n      state.cellInput = newInput\r\n    },\r\n    setCellInput: (state, action) => {\r\n      state.cellInput = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const selectCellTypes = (state) => state.cell.cellTypes\r\n\r\nexport const selectCellInput = (state) => state.cell.cellInput\r\n\r\nexport const { addCell, setCellInput } = cellSlice.actions\r\n\r\nexport default cellSlice.reducer\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport { addCell, setCellInput, selectCellInput, selectCellTypes } from './cellSlice'\r\nimport styles from './Cell.module.css'\r\n\r\nexport function Cell () {\r\n  const cellInput = useSelector(selectCellInput)\r\n  const cellTypes = useSelector(selectCellTypes)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className={styles.cell}>\r\n        <textarea\r\n            placeholder=\"Enter the cell name followed by the domain names, separated by spaces (e.g. 'Bit a b c'.) Multiple cell types can be added at once, one cell type per line.\"\r\n            value={cellInput}\r\n            onChange={(e) => dispatch(setCellInput(e.target.value))}\r\n        />\r\n        <br/>\r\n        <button\r\n            aria-label=\"Add Cell Type\"\r\n            onClick={() => dispatch(addCell())}\r\n        >\r\n            Add Cell Type\r\n        </button>\r\n        {cellTypes.size > 0 &&\r\n        <div>\r\n            <h2>Cells</h2>\r\n            <table>\r\n                <tbody>\r\n                    {Array.from(cellTypes.keys()).map((cellName) => {\r\n                      const cellData = cellTypes.get(cellName)\r\n                      return (<tr key={cellName}>\r\n                            <td>{cellName}</td>\r\n                            {cellData.domains.map((domainName) => {\r\n                              return (<td>{domainName}</td>)\r\n                            })}\r\n                        </tr>)\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>}\r\n    </div>)\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst { Map } = require('immutable')\r\n\r\nconst initialState = {\r\n  strandInput: '',\r\n  strandTypes: new Map()\r\n}\r\n\r\nexport const strandSlice = createSlice({\r\n  name: 'strand',\r\n  initialState,\r\n  reducers: {\r\n    addStrand: (state) => {\r\n      const data = state.strandInput.split('\\n')\r\n      let newInput = ''\r\n      data.forEach((item, index) => {\r\n        if (item !== '') {\r\n          let strings = item.split(' ')\r\n          strings = strings.filter(item => item)\r\n          const hexRegex = /^#?[0-9A-Fa-f]{6}$/\r\n          let color = '0x000000'\r\n\r\n          if (strings.length > 0 && strings[strings.length - 1].match(hexRegex)) {\r\n            color = strings[strings.length - 1]\r\n            strings = strings.slice(0, -1)\r\n            if (!color.startsWith('#')) {\r\n              color = '#' + color\r\n            }\r\n          }\r\n\r\n          if (strings.length <= 2) {\r\n            newInput += item + '\\n'\r\n          } else if (Array.from(state.strandTypes.keys()).includes(strings[0])) {\r\n            newInput += item + '\\n'\r\n          } else if (strings[strings.length - 1] !== 'true' && strings[strings.length - 1] !== 'false') {\r\n            newInput += item + '\\n'\r\n          } else {\r\n            state.strandTypes = state.strandTypes.set(strings[0], { domains: strings.slice(1, -1), is_complementary: strings[strings.length - 1] === 'true', color: color })\r\n          }\r\n        }\r\n      })\r\n\r\n      state.strandInput = newInput\r\n    },\r\n    setStrandInput: (state, action) => {\r\n      state.strandInput = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const selectStrandTypes = (state) => state.strand.strandTypes\r\n\r\nexport const selectStrandInput = (state) => state.strand.strandInput\r\n\r\nexport const { addStrand, setStrandInput } = strandSlice.actions\r\n\r\nexport default strandSlice.reducer\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport { addStrand, setStrandInput, selectStrandInput, selectStrandTypes } from './strandSlice'\r\n\r\nexport function Strand () {\r\n  const strandInput = useSelector(selectStrandInput)\r\n  const strandTypes = useSelector(selectStrandTypes)\r\n  const dispatch = useDispatch()\r\n  return (\r\n  <div>\r\n      <textarea\r\n        placeholder=\"Enter the strand name, followed by the domain names, followed by a boolean value indicating whether the strand is complementary to the top strand (dashed lines) or not (solid line.) Optionally, you can include a hex color code at the end to assign a color to your strand (default is black.) (e.g. Zero-first a b c false #0066ff) Multiple strand types can be added at once, one strand type per line.\"\r\n        value={strandInput}\r\n        onChange={(e) => dispatch(setStrandInput(e.target.value))}>\r\n      </textarea>\r\n      <br />\r\n      <button\r\n        aria-label=\"Add Strand Type\"\r\n        onClick={() => dispatch(addStrand())}\r\n      >\r\n        Add Strand Type\r\n      </button>\r\n      {strandTypes.size > 0 &&\r\n      <div>\r\n          <h2>Strands</h2>\r\n          <table>\r\n              <tbody>\r\n                {Array.from(strandTypes.keys()).map((strandName) => {\r\n                  const strandData = strandTypes.get(strandName)\r\n                  const left = '\\u25C0'\r\n                  const right = '\\u25B6'\r\n                  return (<tr style={{ color: strandData.color }}>\r\n                            <td>{strandName}</td>\r\n                            {strandData.is_complementary && <td>{left}</td>}\r\n                            {strandData.domains.map((domainName) => {\r\n                              return (<td>{domainName}</td>)\r\n                            })}\r\n                            {!strandData.is_complementary && <td>{right}</td>}\r\n                        </tr>)\r\n                })}\r\n              </tbody>\r\n          </table>\r\n      </div>}\r\n  </div>)\r\n}\r\n","import React from 'react'\nimport { Cell } from './features/cell/Cell'\nimport { Strand } from './features/strand/Strand'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Cell />\n        <Strand />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\nimport cellReducer from '../features/cell/cellSlice'\nimport strandReducer from '../features/strand/strandSlice'\n\nexport const store = configureStore({\n  reducer: {\n    cell: cellReducer,\n    strand: strandReducer\n  }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}